Создать двух пользователей (с помощью метода User.objects.create_user('username')):
>>> u1 = User.objects.create_user('John')
>>> u2 = User.objects.create_user('Alex')
>>> u1
<User: John>
>>> u2
<User: Alex>

Создать два объекта модели Author, связанные с пользователями:
>>> Author.objects.create(authorUser = u1)
<Author: Author object (1)>
>>> Author.objects.create(authorUser = u2)
<Author: Author object (2)>


Добавить 4 категории в модель Category:
>>> Category.objects.create(name = 'Design')
<Category: Category object (1)>
>>> Category.objects.create(name = 'IT')
<Category: Category object (2)>
>>> Category.objects.create(name = 'DIY')
<Category: Category object (3)>
>>> Category.objects.create(name = 'Travel')
<Category: Category object (4)>

Добавить 2 статьи и 1 новость:
>>> author = Author.objects.get(id=1)
>>> Post.objects.create(author=author,categoryType='AR',title = 'SomeTitle', text = 'SomeText')
<Post: Post object (1)>
>>> Post.objects.create(author=author,categoryType='NW',title = 'SomeTitle2', text = 'SomeText2')
<Post: Post object (2)>
>>> author = Author.objects.get(id=2)
>>> Post.objects.create(author=author,categoryType='AR',title = 'SomeTitle3', text = 'SomeText3')
<Post: Post object (3)>


Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий):
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3))
>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=4))

Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий):
>>> Comment.objects.create(commentPost=Post.objects.get(id=1),commentUser=Author.objects.get(id=1).authorUser, text = 'SomeComment')
<Comment: Comment object (1)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=1),commentUser=Author.objects.get(id=2).authorUser, text = 'SomeComment2')
<Comment: Comment object (2)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=2),commentUser=Author.objects.get(id=2).authorUser, text = 'SomeComment3')
<Comment: Comment object (3)>
>>> Comment.objects.create(commentPost=Post.objects.get(id=3),commentUser=Author.objects.get(id=1).authorUser, text = 'SomeComment4')
<Comment: Comment object (4)>

Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов:
>>> Comment.objects.get(id=1).like()
>>> Comment.objects.get(id=2).dislike()
>>> Post.objects.get(id=1).like()
>>> Post.objects.get(id=2).like()

Обновить рейтинги пользователей:
>>> a = Author.objects.get(id=1)
>>> a.update_rating()
>>> a.ratingAuthor
7
>>> a = Author.objects.get(id=2)
>>> a.update_rating()
>>> a.ratingAuthor
-1

Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта):
>>> a = Author.objects.order_by('-ratingAuthor')[:1]
>>> a
<QuerySet [<Author: Author object (1)>]>

Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой стать:
>>> a = Post.objects.order_by('-rating')[:1]
>>> a
<QuerySet [<Post: Post object (1)>]>
>>> for i in a:
...     i.dateCreation
...     i.author.authorUser.username
...     i.rating
...     i.title
...     i.preview()

Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
best_post = Post.objects.all().order_by('-rating')[0]
comment_list = Comment.objects.filter(post_id=best_post)
for c in comment_list:
    print(f'Дата добавления комментария: {c.date_create}')
    print(f'Пользователь: {c.user_id.username}')
    print(f'Рейтинг комментария: {c.rating}')
    print(f'Комментарий: {c.text}')